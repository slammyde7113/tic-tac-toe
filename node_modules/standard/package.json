{
  "_args": [
    [
      {
        "raw": "standard@^8.6.0",
        "scope": null,
        "escapedName": "standard",
        "name": "standard",
        "rawSpec": "^8.6.0",
        "spec": ">=8.6.0 <9.0.0",
        "type": "range"
      },
      "/home/sdyer/wdi/practices/tic-tac-toe"
    ]
  ],
  "_from": "standard@>=8.6.0 <9.0.0",
  "_id": "standard@8.6.0",
  "_inCache": true,
  "_location": "/standard",
  "_nodeVersion": "6.9.1",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/standard-8.6.0.tgz_1479932777128_0.20548424590379"
  },
  "_npmUser": {
    "name": "feross",
    "email": "feross@feross.org"
  },
  "_npmVersion": "3.10.8",
  "_phantomChildren": {
    "babel-code-frame": "6.22.0",
    "chalk": "1.1.3",
    "concat-stream": "1.6.0",
    "debug": "2.6.6",
    "escope": "3.6.0",
    "espree": "3.4.3",
    "estraverse": "4.2.0",
    "esutils": "2.0.2",
    "file-entry-cache": "2.0.0",
    "glob": "7.1.1",
    "globals": "9.17.0",
    "ignore": "3.3.0",
    "imurmurhash": "0.1.4",
    "inquirer": "0.12.0",
    "is-my-json-valid": "2.16.0",
    "is-resolvable": "1.0.0",
    "isarray": "1.0.0",
    "js-yaml": "3.7.0",
    "json-stable-stringify": "1.0.1",
    "levn": "0.3.0",
    "lodash": "4.17.4",
    "mkdirp": "0.5.1",
    "natural-compare": "1.4.0",
    "optionator": "0.8.2",
    "path-is-inside": "1.0.2",
    "pluralize": "1.2.1",
    "progress": "1.1.8",
    "require-uncached": "1.0.3",
    "shelljs": "0.7.7",
    "strip-bom": "3.0.0",
    "table": "3.8.3",
    "text-table": "0.2.0",
    "user-home": "2.0.0"
  },
  "_requested": {
    "raw": "standard@^8.6.0",
    "scope": null,
    "escapedName": "standard",
    "name": "standard",
    "rawSpec": "^8.6.0",
    "spec": ">=8.6.0 <9.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/standard/-/standard-8.6.0.tgz",
  "_shasum": "635132be7bfb567c2921005f30f9e350e4752aad",
  "_shrinkwrap": null,
  "_spec": "standard@^8.6.0",
  "_where": "/home/sdyer/wdi/practices/tic-tac-toe",
  "author": {
    "name": "Feross Aboukhadijeh",
    "email": "feross@feross.org",
    "url": "http://feross.org/"
  },
  "bin": {
    "standard": "./bin/cmd.js"
  },
  "bugs": {
    "url": "https://github.com/feross/standard/issues"
  },
  "dependencies": {
    "eslint": "~3.10.2",
    "eslint-config-standard": "6.2.1",
    "eslint-config-standard-jsx": "3.2.0",
    "eslint-plugin-promise": "~3.4.0",
    "eslint-plugin-react": "~6.7.1",
    "eslint-plugin-standard": "~2.0.1",
    "standard-engine": "~5.2.0"
  },
  "description": "JavaScript Standard Style",
  "devDependencies": {
    "babel-eslint": "^7.0.0",
    "cross-spawn": "^5.0.1",
    "minimist": "^1.2.0",
    "mkdirp": "^0.5.1",
    "run-parallel-limit": "^1.0.3",
    "standard-packages": "^3.1.9",
    "tape": "^4.6.0"
  },
  "directories": {},
  "dist": {
    "shasum": "635132be7bfb567c2921005f30f9e350e4752aad",
    "tarball": "https://registry.npmjs.org/standard/-/standard-8.6.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "3f88a12d661d936612c6f5337ee8085d014d31e5",
  "homepage": "http://standardjs.com",
  "keywords": [
    "JavaScript Standard Style",
    "check",
    "checker",
    "code",
    "code checker",
    "code linter",
    "code standards",
    "code style",
    "enforce",
    "eslint",
    "hint",
    "jscs",
    "jshint",
    "lint",
    "policy",
    "quality",
    "simple",
    "standard",
    "standard style",
    "style",
    "style checker",
    "style linter",
    "verify"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "bret",
      "email": "bcomnes@gmail.com"
    },
    {
      "name": "dcousens",
      "email": "email@dcousens.com"
    },
    {
      "name": "dcposch",
      "email": "dcposch@dcpos.ch"
    },
    {
      "name": "feross",
      "email": "feross@feross.org"
    },
    {
      "name": "flet",
      "email": "flettre@gmail.com"
    },
    {
      "name": "jb55",
      "email": "bill@casarin.me"
    },
    {
      "name": "jprichardson",
      "email": "jprichardson@gmail.com"
    },
    {
      "name": "linusu",
      "email": "linus@folkdatorn.se"
    },
    {
      "name": "mafintosh",
      "email": "mathiasbuus@gmail.com"
    },
    {
      "name": "maxogden",
      "email": "max@maxogden.com"
    },
    {
      "name": "othiym23",
      "email": "ogd@aoaioxxysz.net"
    },
    {
      "name": "reggi",
      "email": "thomas@reggi.com"
    },
    {
      "name": "rstacruz",
      "email": "dropbox@ricostacruz.com"
    },
    {
      "name": "timoxley",
      "email": "secoif@gmail.com"
    },
    {
      "name": "watson",
      "email": "w@tson.dk"
    },
    {
      "name": "xjamundx",
      "email": "jamund@gmail.com"
    },
    {
      "name": "yoshuawuyts",
      "email": "i@yoshuawuyts.com"
    }
  ],
  "name": "standard",
  "optionalDependencies": {},
  "readme": "<h1 align=\"center\">\n  <a href=\"http://standardjs.com\"><img src=\"https://cdn.rawgit.com/feross/standard/master/sticker.svg\" alt=\"Standard - JavaScript Style Guide\" width=\"200\"></a>\n  <br>\n  JavaScript Standard Style\n  <br>\n  <br>\n</h1>\n\n<h4 align=\"center\">One JavaScript Style Guide to Rule Them All</h4>\n\n<p align=\"center\">\n  <a href=\"https://travis-ci.org/feross/standard\"><img src=\"https://img.shields.io/travis/feross/standard/master.svg\" alt=\"Travis\"></a>\n  <a href=\"https://www.npmjs.com/package/standard\"><img src=\"https://img.shields.io/npm/dm/standard.svg\" alt=\"npm downloads\"></a>\n  <a href=\"https://www.npmjs.com/package/standard\"><img src=\"https://img.shields.io/npm/v/standard.svg\" alt=\"npm version\"></a>\n</p>\n<br>\n\nNo decisions to make. No `.eslintrc`, `.jshintrc`, or `.jscsrc` files to manage. It just\nworks.\n\nThis module saves you (and others!) time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your\n  project. Just drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code\n  review time by eliminating back-and-forth between maintainer and contributor.\n\nInstall with:\n\n```\nnpm install standard\n```\n\n### The Rules\n\n- **2 spaces** – for indentation\n- **Single quotes for strings** – except to avoid escaping\n- **No unused variables** – this one catches *tons* of bugs!\n- **No semicolons** – [It's][1] [fine.][2] [Really!][3]\n- **Never start a line with `(`, `[`, or `` ` ``**\n  - This is the **only** gotcha with omitting semicolons – *automatically checked for you!*\n  - [More details][4]\n- **Space after keywords** `if (condition) { ... }`\n- **Space after function name** `function name (arg) { ... }`\n- Always use `===` instead of `==` – but `obj == null` is allowed to check `null || undefined`.\n- Always handle the node.js `err` function parameter\n- Always prefix browser globals with `window` – except `document` and `navigator` are okay\n  - Prevents accidental use of poorly-named browser globals like `open`, `length`,\n    `event`, and `name`.\n- **And [more goodness][5]** – *give `standard` a try today!*\n\n[1]: http://blog.izs.me/post/2353458699/an-open-letter-to-javascript-leaders-regarding\n[2]: http://inimino.org/~inimino/blog/javascript_semicolons\n[3]: https://www.youtube.com/watch?v=gsfbh17Ax9I\n[4]: RULES.md#semicolons\n[5]: RULES.md#javascript-standard-style\n\nTo get a better idea, take a look at\n[a sample file](https://github.com/feross/bittorrent-dht/blob/master/client.js) written\nin JavaScript Standard Style, or check out some of\n[the repositories](https://github.com/feross/standard-packages/blob/master/all.json) that use\n`standard`.\n\n## Table of Contents\n\n- [Install](#install)\n- [Usage](#usage)\n  - [What you might do if you're clever](#what-you-might-do-if-youre-clever)\n  - [Badge](#badge)\n  - [Text editor plugins](#text-editor-plugins)\n- [FAQ](#faq)\n  - [Why would I use JavaScript Standard Style?](#why-would-i-use-javascript-standard-style)\n  - [I disagree with rule X, can you change it?](#i-disagree-with-rule-x-can-you-change-it)\n  - [But this isn't a real web standard!](#but-this-isnt-a-real-web-standard)\n  - [Is there an automatic formatter?](#is-there-an-automatic-formatter)\n  - [How do I ignore files?](#how-do-i-ignore-files)\n  - [How do I hide a certain warning?](#how-do-i-hide-a-certain-warning)\n  - [I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?](#i-use-a-library-that-pollutes-the-global-namespace-how-do-i-prevent-variable-is-not-defined-errors)\n  - [Can I use a custom JS parser for bleeding-edge ES next support?](#can-i-use-a-custom-js-parser-for-bleeding-edge-es-next-support)\n  - [Can I use a JavaScript language variant, like Flow?](#can-i-use-a-javascript-language-variant-like-flow)\n  - [Can you make rule X configurable?](#can-you-make-rule-x-configurable)\n  - [What about Web Workers?](#what-about-web-workers)\n  - [What about Mocha, Jasmine, QUnit, etc?](#what-about-mocha-jasmine-qunit-etc)\n  - [Is there a Git `pre-commit` hook?](#is-there-a-git-pre-commit-hook)\n  - [How do I make the output all colorful and *pretty*?](#how-do-i-make-the-output-all-colorful-and-pretty)\n  - [I want to contribute to `standard`. What packages should I know about?](#i-want-to-contribute-to-standard-what-packages-should-i-know-about)\n- [Node.js API](#nodejs-api)\n  - [`standard.lintText(text, [opts], callback)`](#standardlinttexttext-opts-callback)\n  - [`standard.lintFiles(files, [opts], callback)`](#standardlintfilesfiles-opts-callback)\n- [IRC channel](#irc-channel)\n- [License](#license)\n\n## Install\n\nThe easiest way to use JavaScript Standard Style to check your code is to install\nit globally as a Node command line program. To do so, simply run the following\ncommand in your terminal (flag `-g` installs `standard` globally on your system,\nomit it if you want to install in the current working directory):\n\n```bash\nnpm install standard --global\n```\n\nOr, you can run this command to install `standard` locally, for use in your module:\n\n```bash\nnpm install standard --save-dev\n```\n\n[Node.js](http://nodejs.org) and [npm](https://npmjs.com) are required to run the preceding commands.\n\n## Usage\n\nAfter you've installed `standard`, you should be able to use the `standard` program. The\nsimplest use case would be checking the style of all JavaScript files in the\ncurrent working directory:\n\n```bash\n$ standard\nError: Use JavaScript Standard Style\n  lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n```\n\nYou can optionally pass in a directory (or directories) using the glob pattern. Be\nsure to quote paths containing glob patterns so that they are expanded by standard\ninstead of your shell:\n\n```bash\n$ standard \"src/util/**/*.js\" \"test/**/*.js\"\n```\n\n**Note:** by default `standard` will look for all files matching the patterns:\n`**/*.js`, `**/*.jsx`.\n\n### What you might do if you're clever\n\n1. Add it to `package.json`\n\n  ```json\n  {\n    \"name\": \"my-cool-package\",\n    \"devDependencies\": {\n      \"standard\": \"*\"\n    },\n    \"scripts\": {\n      \"test\": \"standard && node my-tests.js\"\n    }\n  }\n  ```\n\n2. Check style automatically when you run `npm test`\n\n  ```\n  $ npm test\n  Error: Use JavaScript Standard Style\n    lib/torrent.js:950:11: Expected '===' and instead saw '=='.\n  ```\n\n3. Never give style feedback on a pull request again!\n\n\n\n### Badge\n\nUse this in one of your projects? Include one of these badges in your readme to\nlet people know that your code is using the standard style.\n\n[![Standard - JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n\n```markdown\n[![Standard - JavaScript Style Guide](https://cdn.rawgit.com/feross/standard/master/badge.svg)](https://github.com/feross/standard)\n```\n\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n\n```markdown\n[![Standard - JavaScript Style Guide](https://img.shields.io/badge/code%20style-standard-brightgreen.svg)](http://standardjs.com/)\n```\n\n### Text editor plugins\n\nFirst, install `standard`. Then, install the appropriate plugin for your editor:\n\n#### [Sublime Text](https://www.sublimetext.com/)\n\nUsing **[Package Control][sublime-1]**, install **[SublimeLinter][sublime-2]** and\n**[SublimeLinter-contrib-standard][sublime-3]**.\n\nFor automatic formatting on save, install **[StandardFormat][sublime-4]**.\n\n[sublime-1]: https://packagecontrol.io/\n[sublime-2]: http://www.sublimelinter.com/en/latest/\n[sublime-3]: https://packagecontrol.io/packages/SublimeLinter-contrib-standard\n[sublime-4]: https://packagecontrol.io/packages/StandardFormat\n\n#### [Atom](https://atom.io)\n\nInstall **[linter-js-standard][atom-1]**.\n\nFor automatic formatting, install **[standard-formatter][atom-2]**. For snippets,\ninstall **[standardjs-snippets][atom-3]**.\n\n[atom-1]: https://atom.io/packages/linter-js-standard\n[atom-2]: https://atom.io/packages/standard-formatter\n[atom-3]: https://atom.io/packages/standardjs-snippets\n\n#### [Vim](http://www.vim.org/)\n\nInstall **[Syntastic][vim-1]** and add this line to `.vimrc`:\n\n```vim\nlet g:syntastic_javascript_checkers = ['standard']\n```\n\nFor automatic formatting on save, add these two lines to `.vimrc`:\n\n```vim\nautocmd bufwritepost *.js silent !standard --fix %\nset autoread\n```\n\n[vim-1]: https://github.com/scrooloose/syntastic\n\n#### [Emacs](https://www.gnu.org/software/emacs/)\n\nInstall **[Flycheck][emacs-1]** and check out the **[manual][emacs-2]** to learn\nhow to enable it in your projects.\n\n[emacs-1]: http://www.flycheck.org\n[emacs-2]: http://www.flycheck.org/en/latest/user/installation.html\n\n#### [Brackets](http://brackets.io/)\n\nSearch the extension registry for **[\"Standard Code Style\"][brackets-1]**.\n\n[brackets-1]: https://github.com/ishamf/brackets-standard/\n\n#### [Visual Studio Code](https://code.visualstudio.com/)\n\nInstall **[vscode-standardjs][vscode-1]**. (Includes support for automatic formatting.)\n\nFor JS snippets, install: **[vscode-standardjs-snippets][vscode-2]**. For React snippets, install **[vscode-react-standard][vscode-3]**.\n\n[vscode-1]: https://marketplace.visualstudio.com/items/chenxsan.vscode-standardjs\n[vscode-2]: https://marketplace.visualstudio.com/items?itemName=capaj.vscode-standardjs-snippets\n[vscode-3]: https://marketplace.visualstudio.com/items/TimonVS.ReactSnippetsStandard\n\n#### [WebStorm/PhpStorm][webstorm-1]\n\nBoth WebStorm and PhpStorm can be [configured for Standard Style][webstorm-2].\n\n[webstorm-1]: https://www.jetbrains.com/webstorm/\n[webstorm-2]: https://github.com/feross/standard/blob/master/docs/webstorm.md\n\n## FAQ\n\n### Why would I use JavaScript Standard Style?\n\nThe beauty of JavaScript Standard Style is that it's simple. No one wants to\nmaintain multiple hundred-line style configuration files for every module/project\nthey work on. Enough of this madness!\n\nThis module saves you time in two ways:\n\n- **No configuration.** The easiest way to enforce consistent style in your\n  project. Just drop it in.\n- **Catch style errors before they're submitted in PRs.** Saves precious code\n  review time by eliminating back-and-forth between maintainer and contributor.\n\nAdopting `standard` style means ranking the importance of code clarity and\ncommunity conventions higher than personal style. This might not make sense for\n100% of projects and development cultures, however open source can be a hostile\nplace for newbies. Setting up clear, automated contributor expectations makes a\nproject healthier.\n\n### I disagree with rule X, can you change it?\n\nNo. The whole point of `standard` is to avoid [bikeshedding][bikeshedding] about\nstyle. There are lots of debates online about tabs vs. spaces, etc. that will never\nbe resolved. These debates just distract from getting stuff done. At the end of the\nday you have to 'just pick something', and that's the whole philosophy of\n`standard` -- its a bunch of sensible 'just pick something' opinions. Hopefully,\nusers see the value in that over defending their own opinions.\n\n[bikeshedding]: https://www.freebsd.org/doc/en/books/faq/misc.html#bikeshed-painting\n\n### But this isn't a real web standard!\n\nOf course it's not! The style laid out here is not affiliated with any official web\nstandards groups, which is why this repo is called `feross/standard` and not\n`ECMA/standard`.\n\nThe word \"standard\" has more meanings than just \"web standard\" :-) For example:\n\n- This module helps hold our code to a high *standard of quality*.\n- This module ensures that new contributors follow some basic *style standards*.\n\n### Is there an automatic formatter?\n\nYes! You can use `standard --fix` to automatically fix most issues automatically.\n\n`standard --fix` is built into `standard` (since v8.0.0) for maximum convenience.\nLots of problems are fixable, but some errors, like forgetting to handle the error\nin node-style callbacks, must be fixed manually.\n\nTo save you time, `standard` outputs a message (\"Run `standard --fix` to\nautomatically fix some problems.\") when it detects problems that can be fixed\nautomatically.\n\n### How do I ignore files?\n\nThe paths `node_modules/**`, `*.min.js`, `bundle.js`, `coverage/**`, hidden\nfiles/folders (beginning with `.`), and all patterns in a project's root\n`.gitignore` file are automatically ignored.\n\nSometimes you need to ignore additional folders or specific minified files. To do\nthat, add a `standard.ignore` property to `package.json`:\n\n```json\n\"standard\": {\n  \"ignore\": [\n    \"**/out/\",\n    \"/lib/select2/\",\n    \"/lib/ckeditor/\",\n    \"tmp.js\"\n  ]\n}\n```\n\n### How do I hide a certain warning?\n\nIn rare cases, you'll need to break a rule and hide the warning generated by\n`standard`.\n\nJavaScript Standard Style uses [`eslint`](http://eslint.org/) under-the-hood and\nyou can hide warnings as you normally would if you used `eslint` directly.\n\nTo get verbose output (so you can find the particular rule name to ignore), run:\n\n```bash\n$ standard --verbose\nError: Use JavaScript Standard Style\n  routes/error.js:20:36: 'file' was used before it was defined. (no-use-before-define)\n```\n\nDisable **all rules** on a specific line:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line\n```\n\nOr, disable **only** the `\"no-use-before-define\"` rule:\n\n```js\nfile = 'I know what I am doing' // eslint-disable-line no-use-before-define\n```\n\nOr, disable the `\"no-use-before-define\"` rule for **multiple lines**:\n\n```js\n/* eslint-disable no-use-before-define */\nconsole.log('offending code goes here...')\nconsole.log('offending code goes here...')\nconsole.log('offending code goes here...')\n/* eslint-enable no-use-before-define */\n```\n\n### I use a library that pollutes the global namespace. How do I prevent \"variable is not defined\" errors?\n\nSome packages (e.g. `mocha`) put their functions (e.g. `describe`, `it`) on the\nglobal object (poor form!). Since these functions are not defined or `require`d\nanywhere in your code, `standard` will warn that you're using a variable that is\nnot defined (usually, this rule is really useful for catching typos!). But we want\nto disable it for these global variables.\n\nTo let `standard` (as well as humans reading your code) know that certain variables\nare global in your code, add this to the top of your file:\n\n```\n/* global myVar1, myVar2 */\n```\n\nIf you have hundreds of files, adding comments to every file can be tedious. In\nthese cases, you can add this to `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"globals\": [ \"myVar1\", \"myVar2\" ]\n  }\n}\n```\n\n### Can I use a custom JS parser for bleeding-edge ES next support?\n\nBefore you use a custom parser, consider whether the added complexity in your\nbuild process is worth it.\n\n`standard` supports custom JS parsers. To use a custom parser, install it from npm\n(example: `npm install babel-eslint`) and add this to your `package.json`:\n\n```json\n{\n  \"standard\": {\n    \"parser\": \"babel-eslint\"\n  }\n}\n```\n\nIf you're using `standard` globally (you installed it with `-g`), then you also\nneed to install `babel-eslint` globally with `npm install babel-eslint -g`.\n\n### Can I use a JavaScript language variant, like Flow?\n\nBefore you use a custom JS language variant, consider whether the added complexity\nin your build process (and effort required to get new contributors up-to-speed) is\nworth it.\n\n`standard` supports ESLint plugins. Use one of these to transform your code into\nvalid JavaScript before `standard` sees it. To use a custom parser, install it from\nnpm (example: `npm install eslint-plugin-flowtype`) and add this to your\n`package.json`:\n\n```json\n{\n  \"standard\": {\n    \"parser\": \"babel-eslint\",\n    \"plugins\": [\n      \"flowtype\"\n    ]\n  }\n}\n```\n\nIf you're using `standard` globally (you installed it with `-g`), then you also\nneed to install `eslint-plugin-flowtype` globally with\n`npm install eslint-plugin-flowtype -g`.\n\n### Can you make rule X configurable?\n\nNo. The point of `standard` is to save you time by picking reasonable rules so you\ncan spend your time solving actual problems. If you really do want to configure\nhundreds of eslint rules individually, you can always use `eslint` directly.\n\nIf you just want to tweak a couple rules, consider using\n[this shareable config](https://github.com/feross/eslint-config-standard) and\nlayering your changes on top.\n\nPro tip: Just use `standard` and move on. There are actual real problems that you\ncould spend your time solving! :P\n\n### What about Web Workers?\n\nAdd this to the top of your files:\n\n```js\n/* eslint-env serviceworker */\n```\n\nThis lets `standard` (as well as humans reading your code) know that `self` is a\nglobal in web worker code.\n\n### What about Mocha, Jasmine, QUnit, etc?\n\nTo support mocha in your test files, add this to the beginning of your test files:\n\n```js\n/* eslint-env mocha */\n```\n\nWhere `mocha` can be one of `jasmine`, `qunit`, `phantomjs`, and so on. To see a\nfull list, check ESLint's\n[specifying environments](http://eslint.org/docs/user-guide/configuring.html#specifying-environments)\ndocumentation. For a list of what globals are available for these environments,\ncheck the\n[globals](https://github.com/sindresorhus/globals/blob/master/globals.json) npm\nmodule.\n\n### Is there a Git `pre-commit` hook?\n\nFunny you should ask!\n\n```sh\n#!/bin/sh\n# Ensure all javascript files staged for commit pass standard code style\ngit diff --name-only --cached --relative | grep '\\.jsx\\?$' | xargs standard\nif [ $? -ne 0 ]; then exit 1; fi\n```\n\nAlternatively, [overcommit](https://github.com/brigade/overcommit) is a Git hook\nmanager that includes support for running `standard` as a Git pre-commit hook.\nTo enable this, add the following to your `.overcommit.yml` file:\n\n```yaml\nPreCommit:\n  Standard:\n    enabled: true\n```\n\n### How do I make the output all colorful and *pretty*?\n\nThe built-in output is simple and straightforward, but if you like shiny things,\ninstall [snazzy](https://www.npmjs.com/package/snazzy):\n\n```\nnpm install snazzy\n```\n\nAnd run:\n\n```bash\n$ standard --verbose | snazzy\n```\n\nThere's also [standard-tap](https://www.npmjs.com/package/standard-tap),\n[standard-json](https://www.npmjs.com/package/standard-json),\n[standard-reporter](https://www.npmjs.com/package/standard-reporter), and\n[standard-summary](https://www.npmjs.com/package/standard-summary).\n\n## Node.js API\n\n### `standard.lintText(text, [opts], callback)`\n\nLint the provided source `text` to enforce JavaScript Standard Style. An `opts` object may\nbe provided:\n\n```js\nvar opts = {\n  fix: false,   // automatically fix problems\n  globals: [],  // global variables to declare\n  plugins: [],  // eslint plugins\n  envs: [],     // eslint environment\n  parser: ''    // js parser (e.g. babel-eslint)\n}\n```\n\nThe `callback` will be called with an `Error` and `results` object:\n\n```js\nvar results = {\n  results: [\n    {\n      filePath: '',\n      messages: [\n        { ruleId: '', message: '', line: 0, column: 0 }\n      ],\n      errorCount: 0,\n      warningCount: 0\n    }\n  ],\n  errorCount: 0,\n  warningCount: 0\n}\n```\n\n### `standard.lintFiles(files, [opts], callback)`\n\nLint the provided `files` globs. An `opts` object may be provided:\n\n```js\nvar opts = {\n  ignore: [],   // file globs to ignore (has sane defaults)\n  cwd: '',      // current working directory (default: process.cwd())\n  fix: false,   // automatically fix problems\n  globals: [],  // global variables to declare\n  plugins: [],  // eslint plugins\n  envs: [],     // eslint environment\n  parser: ''    // js parser (e.g. babel-eslint)\n}\n```\n\nThe `callback` will be called with an `Error` and `results` object (same as above).\n\n## IRC channel\n\nJoin us in `#standard` on freenode.\n\n## Contribute\n\nContributions are welcome! Check out the [issues](https://github.com/feross/standard/issues) or the [PRs](https://github.com/feross/standard/pulls), and make your own if you want something that you don't see there.\n\n### I want to contribute to `standard`. What packages should I know about?\n\n- **[standard](https://github.com/feross/standard)** - this repo\n  - **[standard-engine](https://github.com/flet/standard-engine)** - cli engine for arbitrary eslint rules\n  - **[eslint-config-standard](https://github.com/feross/eslint-config-standard)** - eslint rules for standard\n  - **[eslint-config-standard-jsx](https://github.com/feross/eslint-config-standard-jsx)** - eslint rules for standard (JSX)\n  - **[eslint-plugin-standard](https://github.com/xjamundx/eslint-plugin-standard)** - custom eslint rules for standard (not part of eslint core)\n  - **[eslint](https://github.com/eslint/eslint)** - the linter that powers standard\n- **[snazzy](https://github.com/feross/snazzy)** - pretty terminal output for standard\n- **[standard-www](https://github.com/feross/standard-www)** - code for http://standardjs.com\n- **[semistandard](https://github.com/Flet/semistandard)** - standard, with semicolons (if you must)\n\nThere are also many **[editor plugins](#text-editor-plugins)**, a list of\n**[npm packages that use `standard`](https://github.com/feross/standard-packages)**,\nand an awesome list of\n**[packages in the `standard` ecosystem](https://github.com/feross/awesome-standard)**.\n\n## License\n\n[MIT](LICENSE). Copyright (c) [Feross Aboukhadijeh](http://feross.org).\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/feross/standard.git"
  },
  "scripts": {
    "test": "./bin/cmd.js --verbose && tape test/*.js",
    "test-disabled": "npm test -- --disabled",
    "test-offline": "npm test -- --offline",
    "test-offline-quick": "npm test -- --offline --quick",
    "test-quick": "npm test -- --quick",
    "update-authors": "./bin/update-authors.sh"
  },
  "version": "8.6.0"
}
